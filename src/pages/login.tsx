import Head from 'next/head'
import Link from 'next/link'
import React, { FC, useRef, useState } from 'react'
import api from '../helpers/api'
import { logIn } from '../helpers/auth'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from "yup";
import { Card } from 'primereact/card'
import { InputText } from 'primereact/inputtext'
import { Button } from 'primereact/button'
import { Toast } from 'primereact/toast'

type LoginData = {
  email: string;
  password: string;
}

const schema = yup.object().shape({
  email: yup.string().email().max(255).required(),
  password: yup.string().min(12).required()
});

export default function Login() {
  const [loading, setLoading] = useState(false)
  const toast = useRef<Toast>(null);
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  })

  const onSubmit = (data: LoginData) => {
    setLoading(true)
    api.get('csrf-cookie').then(() => {
      api.post('login', data).then((res): any => {
        setLoading(false)
        if (res.data.error) {
          return toast.current?.show({ severity: 'error', summary: 'Error Message', detail: res.data.data })
        }
        return logIn(res.data.user)
      }).catch(e => {
        setLoading(false)
        if (e.response.data.errors) {
          const errors = Object.keys(e.response.data.errors).map(key => e.response.data.errors[key]).flat()
          return errors.forEach(error => toast.current?.show({ severity: 'error', summary: 'Error Message', detail: error }))
        }

        return toast.current?.show({ severity: 'error', summary: 'Error Message', detail: 'Something went wrong!' })
      })
    })
  }

  const LoginCardFooter: FC = () => {
    return (
      <div className="p-field p-d-flex p-jc-center">
        <Link href="/register">Don&apos;t have an account?</Link>
      </div>
    )
  }

  const getFormErrorMessage = (name: string) => {
    return errors[name] && <small className="p-error">{errors[name].message}</small>
  };

  return (
    <div>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="row justify-content-center align-items-center vh-100 vw-100">
          <Card title='Log in' footer={LoginCardFooter} className="col-12 col-md-9 col-lg-6 col-xl-4">
            <form onSubmit={handleSubmit(onSubmit)} className="p-fluid">
              <div className="p-field">
                <label htmlFor="email">Email address</label>
                <InputText id="email" type="email" {...register("email")} />
                {getFormErrorMessage('email')}
              </div>
              <div className="p-field">
                <label htmlFor="password">Password</label>
                <InputText id="password" type="password" {...register("password")} />
                {getFormErrorMessage('password')}
              </div>
              <div className="p-field p-d-flex p-jc-center">
                <Link href="/forgot-password">Forgot password?</Link>
              </div>
              <Button label="Login" iconPos="right" loading={loading} />
            </form>
          </Card>
        </div>
        <Toast ref={toast} />
      </main>
    </div>
  )
}
