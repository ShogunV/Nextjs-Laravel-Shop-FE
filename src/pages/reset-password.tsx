import Head from 'next/head'
import React, { useState } from 'react'
import api from '../helpers/api'
import { useRouter } from 'next/router'
import { InputText } from 'primereact/inputtext'
import { Card } from 'primereact/card';
import { Button } from 'primereact/button';
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from "yup";

type ResetPasswordData = {
  email: string;
  password: string;
  password_confirmation: string;
}

const schema = yup.object().shape({
  email: yup.string().email().max(255).required(),
  password: yup.string().min(12).required().matches(
    /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]/,
    "Password must contain at least one uppercase, one lowercase, one number and one special case character"
  ),
  password_confirmation: yup.string().oneOf([yup.ref('password'), null], "Password confirmation doesn't match")
});

export default function ResetPassword() {
  const { query: { token } } = useRouter()
  const [loading, setLoading] = useState(false)
  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  })

  const onSubmit = (data: ResetPasswordData) => {
    setLoading(true)
    api.post('reset-password', { ...data, token: token }).then(res => console.log('res : ' + JSON.stringify(res))).catch(e => console.log('e : ' + e))
  }

  const getFormErrorMessage = (name: string) => {
    return errors[name] && <small className="p-error">{errors[name].message}</small>
  };

  return (
    <div className="container mx-auto px-4 flex flex-col justify-center h-screen">
      <Head>
        <title>Reset password</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="mx-auto md:w-96">
        <Card title='Reset password'>
          <form onSubmit={handleSubmit(onSubmit)} className="p-fluid">
            <div className="p-field">
              <label htmlFor="email">Email</label>
              <InputText id="email" type="email" {...register("email")} />
              {getFormErrorMessage('email')}
            </div>
            <div className="p-field">
              <label htmlFor="password">Password</label>
              <InputText id="password" type="password" {...register("password")} />
              {getFormErrorMessage('password')}
            </div>
            <div className="p-field p-mb-5">
              <label htmlFor="password_confirmation">Confirm Password</label>
              <InputText id="password_confirmation" type="password" {...register("password_confirmation")} />
              {getFormErrorMessage('password_confirmation')}
            </div>
            <Button label="Submit" iconPos="right" loading={loading} />
          </form>
        </Card>
      </main>
    </div>
  )
}
